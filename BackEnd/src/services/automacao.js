const QRCode = require("qrcode");
const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcodeTerminal = require("qrcode-terminal");

// Fun√ß√£o para gerar mensagem de compra
function gerarMensagemCompra(dados) {
  let mensagem = `üßæ Detalhes da sua compra:\n\n`;
  mensagem += `üë§ Cliente: ${dados.cliente}\n`;
  mensagem += `üìÑ N¬∫ da Venda: ${dados.numero_venda}\n\n`;
  mensagem += `üí∞ Total Bruto: ${dados.valores.total_bruto}\n`;
  mensagem += `üîª Descontos: ${dados.valores.descontos}\n`;
  mensagem += `üî∫ Acr√©scimos: ${dados.valores.acrescimos}\n\n`;
  mensagem += `üì¶ Produtos:\n\n`;

  dados.produtos.forEach((prod) => {
    mensagem += `- ${prod.nome} ‚Äî ${prod.quantidade} un. ‚Äî Total: ${prod.total}\n`;
  });

  mensagem += `\n‚úÖ Valor Total da Compra: ${dados.valor_total_compra}`;

  return mensagem;
}

// Inicializa cliente WhatsApp com sess√£o local
const client = new Client({
  authStrategy: new LocalAuth(),
  headless: true, // Headless ON pra n√£o aparecer
  args: [
    "--no-sandbox",
    "--disable-setuid-sandbox",
    "--disable-dev-shm-usage",
    "--disable-accelerated-2d-canvas",
    "--no-first-run",
    "--no-zygote",
    "--single-process", // tenta rodar tudo num processo s√≥
    "--disable-gpu",
    "--window-size=1920,1080",
  ],
});

// Status do Bot
let statusBot = "offline";
let ultimoQRCode = null;
let qrTimeout = null;

// === Eventos do cliente ===

// QR Code gerado
client.on("qr", (qr) => {
  console.log("üì≤ Escaneia esse QR Code com seu WhatsApp:");
  qrcodeTerminal.generate(qr, { small: true });
  ultimoQRCode = qr;
  statusBot = "aguardando conex√£o";

  // Reinicializa se n√£o conectar em 2 minutos
  if (qrTimeout) clearTimeout(qrTimeout);
  qrTimeout = setTimeout(() => {
    if (statusBot !== "online") {
      console.log("‚ö†Ô∏è N√£o conectado ap√≥s 2 minutos. Reinicializando...");
      client.destroy().then(() => client.initialize());
    }
  }, 2 * 60 * 1000);
});

// Cliente pronto
client.on("ready", () => {
  statusBot = "online";
  ultimoQRCode = null; // Limpando QR Code, n√£o precisa mais
  console.log("‚úÖ Bot est√° pronto e conectado!");
  if (qrTimeout) clearTimeout(qrTimeout);
});

// Cliente desconectado
client.on("disconnected", (reason) => {
  statusBot = "offline";
  ultimoQRCode = null;
  console.log(`‚ùå Bot foi desconectado! Motivo: ${reason}`);
  // Reinicializa automaticamente
  setTimeout(() => client.initialize(), 5000);
});

// Falha na autentica√ß√£o
client.on("auth_failure", (msg) => {
  statusBot = "offline";
  ultimoQRCode = null;
  console.error("‚ùå Falha na autentica√ß√£o:", msg);
});

// Erro geral
client.on("error", (error) => {
  statusBot = "erro";
  console.error("‚ùå Erro no cliente WhatsApp:", error);
});

// === Fun√ß√µes de API ===

// Endpoint para pegar o QR Code
const qrCode = async (req, res) => {
  try {
    if (statusBot === "online") {
      return res.status(200).json({
        status_bot: statusBot,
        mensagem_status: "‚úÖ Bot j√° est√° conectado",
        qr_code: null,
        ultima_atualizacao: new Date().toISOString(),
      });
    }

    if (!ultimoQRCode) {
      return res.status(404).json({
        error:
          "Nenhum QR Code dispon√≠vel no momento. Aguarde o bot gerar ou reinicie.",
        status_bot: statusBot,
      });
    }

    const qrCodeBase64 = await QRCode.toDataURL(ultimoQRCode);

    return res.json({
      status_bot: statusBot,
      mensagem_status: "üîÑ Bot aguardando escaneamento do QR Code",
      qr_code: qrCodeBase64,
      ultima_atualizacao: new Date().toISOString(),
    });
  } catch (error) {
    console.error("‚ùå Erro ao gerar QR Code:", error);
    return res
      .status(500)
      .json({ error: "Erro ao gerar QR Code", details: error.message });
  }
};

// Fun√ß√£o utilit√°ria para sanitizar n√∫mero
const sanitizarNumero = (numero) => {
  let limpo = numero.replace(/\D/g, "");
  if (!limpo.startsWith("55")) {
    limpo = `55${limpo}`;
  }
  return limpo;
};

// Endpoint para enviar mensagem
const enviarMensagem = async (req, res) => {
  try {
    if (!client.info || statusBot !== "online") {
      return res
        .status(503)
        .json({ error: "Cliente WhatsApp ainda n√£o est√° pronto" });
    }

    const { numero, mensagem } = req.body;

    if (!numero || !mensagem) {
      return res
        .status(400)
        .json({ error: "N√∫mero e mensagem s√£o obrigat√≥rios" });
    }

    const numeroSanitizado = sanitizarNumero(numero);
    const chatId = `${numeroSanitizado}@c.us`;

    console.log("üîç Enviando mensagem para:", chatId);

    const isRegistered = await client.isRegisteredUser(chatId);
    if (!isRegistered) {
      return res
        .status(404)
        .json({ error: "N√∫mero n√£o est√° registrado no WhatsApp" });
    }

    const mensagemFormatada = gerarMensagemCompra(mensagem);

    await client.sendMessage(chatId, mensagemFormatada);

    return res.json({
      success: true,
      message: "‚úÖ Mensagem enviada com sucesso!",
    });
  } catch (error) {
    console.error("‚ùå Erro ao enviar mensagem:", error);
    return res.status(500).json({
      error: "Falha ao enviar mensagem",
      details: error.message,
    });
  }
};

// Inicializa o cliente
(async () => {
  try {
    await client.initialize();
  } catch (error) {
    console.error("‚ùå Erro ao inicializar o cliente:", error);
    // tenta reiniciar em 5 segundos
    setTimeout(() => client.initialize(), 5000);
  }
})();

// Exporta fun√ß√µes
module.exports = {
  qrCode,
  enviarMensagem,
};
